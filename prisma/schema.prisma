// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Adress {
  idAdress String   @id @default(uuid())
  street   String   @map("street")
  stadium  Stadium?

  @@map("adress")
}

model Championship {
  idChampionship   String @id @default(uuid())
  nameChampionship String
  yearChampionship Int
  // @OneToMany(() => Team, (team) => team.championship)
  // teams: Team;

  // @OneToMany(() => Match, (match) => match.championship)
  // match: Match;

  // @OneToOne(() => Classification)
  // @JoinColumn()
  // classification: Classification;

  @@map("championship")
}

model Classification {
  idClassification String @id @default(uuid())
  pointsTeam       Int
  goalDifference   Int
  // @OneToMany(() => Team, (team) => team.classification)
  // teams: Team;

  @@map("classification")
}

model Match {
  idMatch          String   @id @default(uuid())
  goalHomeTeam     Int
  goalVisitingTeam Int
  dateMatch        DateTime
  occurredMatch    Boolean  @default(false)
  // @ManyToOne(() => Championship, (championship) => championship.match)
  // championship: Championship;

  // @ManyToOne(() => Team, (team) => team.matchAsHomeTeam)
  // homeTeam: Team;

  // @ManyToOne(() => Team, (team) => team.matchAsVisitingTeam)
  // visitingTeam: Team;

  @@map("match")
}

model Stadium {
  idStadium   String  @id @default(uuid())
  nameStadium String
  adress      Adress? @relation(fields: [idAdress], references: [idAdress])
  idAdress    String? @unique()

  @@map("stadium")
}

model Player {
  idPlayer       String         @id @default(uuid())
  namePlayer     String
  genderPlayer   String
  isActivePlayer Boolean        @default(true)
  PlayerOnTeam   PlayerOnTeam[]

  @@map("player")
}

model Team {
  idTeam   String @id @default(uuid())
  nameTeam String
  // @OneToOne(() => Player)
  // @JoinColumn()
  // captain: Player;

  // @OneToOne(() => Stadium)
  // home: Stadium;

  // @ManyToOne(() => Championship, (championship) => championship.teams)
  // @JoinColumn()
  // championship: Championship;

  // @ManyToOne(() => Classification, (classification) => classification.teams)
  // classification: Classification;

  // @OneToMany(() => Match, (match) => match.homeTeam)
  // matchAsHomeTeam: Match;

  // @OneToMany(() => Match, (match) => match.visitingTeam)
  // matchAsVisitingTeam: Match;

  // Player         Player? @relation(fields: [playerIdPlayer], references: [idPlayer])
  // playerIdPlayer String?
  PlayerOnTeam PlayerOnTeam[]

  @@map("team")
}

model PlayerOnTeam {
  id       String @id @default(uuid())
  team     Team   @relation(fields: [idTeam], references: [idTeam])
  idTeam   String
  player   Player @relation(fields: [idPlayer], references: [idPlayer])
  idPlayer String

  @@map("player-on-team")
}
